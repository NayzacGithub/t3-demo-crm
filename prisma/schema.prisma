// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgres" // NOTE: sqlite does not work with NextAuth.js
    url      = env("DATABASE_URL")
}

model Example {
    id String @id @default(cuid())
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String         @id @default(cuid())
    name          String?
    email         String?        @unique
    emailVerified DateTime?
    image         String?
    organizations Organization[]
    contacts      Contact[]
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Organization {
    id          String    @id @default(cuid())
    accountId   String
    account     User      @relation(fields: [accountId], references: [id], onDelete: Cascade)
    name        String    @unique
    email       String?   @unique
    phone       String?   @unique
    address     String?
    city        String?
    region      String?
    country     String?
    postal_code String?
    created_at  DateTime  @default(now())
    updated_at  DateTime  @default(now()) @updatedAt
    deleted_at  DateTime?
    contacts    Contact[]
}

model Contact {
    id             String        @id @default(cuid())
    accountId      String
    account        User          @relation(fields: [accountId], references: [id], onDelete: Cascade)
    organizationId String
    organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
    first_name     String
    last_name      String
    email          String?       @unique
    phone          String?       @unique
    address        String?
    city           String?
    region         String?
    country        String?
    postal_code    String?
    created_at     DateTime      @default(now())
    updated_at     DateTime      @default(now()) @updatedAt
    deleted_at     DateTime?

    @@unique([first_name, last_name])
}
